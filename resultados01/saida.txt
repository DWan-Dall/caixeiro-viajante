> library(dplyr)
library(ggplot2)
library(combinat)
> if (!dir.exists("resultados")) {
  dir.create("resultados")
}
> gerar_cidades <- function(n) {
  set.seed(42)
  tibble(
    cidade = paste0("C", 1:n),
    x = runif(n, 0, 100),
    y = runif(n, 0, 100)
  )
}
> print(gerar_cidades)
function(n) {
  set.seed(42)
  tibble(
    cidade = paste0("C", 1:n),
    x = runif(n, 0, 100),
    y = runif(n, 0, 100)
  )
}
> distancia <- function(c1, c2) {
  sqrt((c1$x - c2$x)^2 + (c1$y - c2$y)^2)
}
> calcular_distancia_total <- function(caminho, cidades) {
  total <- 0
  for (i in 1:(length(caminho)-1)) {
    total <- total + distancia(cidades[caminho[i], ], cidades[caminho[i+1], ])
  }
  total <- total + distancia(cidades[caminho[length(caminho)], ], cidades[caminho[1], ])
  return(total)
}
> forca_bruta <- function(cidades) {
  inicio <- Sys.time()
  perms <- permn(1:nrow(cidades))
  melhor_dist <- Inf
  melhor_caminho <- NULL

  for (p in perms) {
    d <- calcular_distancia_total(p, cidades)
    if (d < melhor_dist) {
      melhor_dist <- d
      melhor_caminho <- p
    }
  }
  tempo <- Sys.time() - inicio
  return(list(caminho = melhor_caminho, distancia = melhor_dist, tempo = as.numeric(tempo, units = "secs")))
}
> heuristica_vizinho <- function(cidades) {
  inicio <- Sys.time()
  restantes <- 2:nrow(cidades)
  atual <- 1
  caminho <- c(atual)

  while (length(restantes) > 0) {
    proximo <- restantes[which.min(sapply(restantes, function(i) distancia(cidades[atual, ], cidades[i, ])))]
    caminho <- c(caminho, proximo)
    restantes <- setdiff(restantes, proximo)
    atual <- proximo
  }

  tempo <- Sys.time() - inicio
  return(list(caminho = caminho, distancia = calcular_distancia_total(caminho, cidades), tempo = as.numeric(tempo, units = "secs")))
}
> resultados <- tibble()

for (n in 5:8) {
  cidades <- gerar_cidades(n)
  res_bruto <- forca_bruta(cidades)
  res_heuristica <- heuristica_vizinho(cidades)

  resultados <- resultados %>% bind_rows(tibble(
    Cidades = n,
    Distancia_Bruta = round(res_bruto$distancia,2),
    Tempo_Bruta = round(res_bruto$tempo,4),
    Distancia_Heuristica = round(res_heuristica$distancia,2),
    Tempo_Heuristica = round(res_heuristica$tempo,4)
  ))
}
> print(resultados)
# A tibble: 4 × 5
  Cidades Distancia_Bruta Tempo_Bruta Distancia_Heuristica Tempo_Heuristica
    <int>           <dbl>       <dbl>                <dbl>            <dbl>
1       5            196.      0.0247                 200.           0.0005
2       6            209.      0.172                  237.           0.0006
3       7            229.      1.12                   239.           0.0022
4       8            233.     10.2                    244.           0.001 
> grafico-resultado <- ggplot(resultados, aes(x = Cidades)) +
  geom_line(aes(y = Distancia_Bruta, color = "Bruta")) +
  geom_line(aes(y = Distancia_Heuristica, color = "Heuristica")) +
  labs(title = "Comparacao de Distancia", y = "Distancia Total", x = "Numero de Cidades") +
  theme_minimal()
Error in grafico - resultado <- ggplot(resultados, aes(x = Cidades)) +  : 
  não foi possível encontrar a função "-<-"
> # Mostrar o gráfico
print(grafico-resultado)
Erro: objeto 'resultado' não encontrado
> # Salvar o gráfico
ggsave("resultados/grafico-resultado-outras-cidades.png", plot = grafico-resultado, width = 8, height = 6, dpi = 300)
Erro: objeto 'resultado' não encontrado
> grafico_resultado <- ggplot(resultados, aes(x = Cidades)) +
  geom_line(aes(y = Distancia_Bruta, color = "Bruta")) +
  geom_line(aes(y = Distancia_Heuristica, color = "Heuristica")) +
  labs(title = "Comparacao de Distancia", y = "Distancia Total", x = "Numero de Cidades") +
  theme_minimal()
> # Mostrar o gráfico
print(grafico_resultado-resultado)
Erro: objeto 'resultado' não encontrado
> # Mostrar o gráfico
print(grafico_resultado)
> # Salvar o gráfico
ggsave("resultados/grafico-resultado-outras-cidades.png", plot = grafico_resultado, width = 8, height = 6, dpi = 300)
> grafico_tempo <- ggplot(resultados, aes(x = Cidades)) +
  geom_line(aes(y = Tempo_Bruta, color = "Bruta")) +
  geom_line(aes(y = Tempo_Heuristica, color = "Heuristica")) +
  # scale_y_log10() +
  labs(title = "Tempo de Execucao - Forca Bruta vs Heuristica", 
       y = "Tempo (segundos)", x = "No de Cidades") +
  theme_minimal()
> print(grafico_tempo)
> # Salvar o gráfico também
ggsave("resultados/grafico-tempo.png", plot = grafico_tempo, width = 8, height = 6, dpi = 300)